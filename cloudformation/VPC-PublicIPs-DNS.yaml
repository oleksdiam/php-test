AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template VPC_with_PublicIPs_And_DNS: Sample template
  showing how to create a VPC with DNS and Public IPs enabled. You will be
  billed for the AWS resources used if you create a stack from this template.
Parameters:
  Env:
    Description: Designates which VPC to deploy
    Type: String
    AllowedValues:
    - qa
    - prod
    Default: qa
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the bastion host
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: bastion-5471
  SSHLocation:
    Description: >-
      Lockdown SSH access to the bastion host (default can be accessed from
      anywhere)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  EC2InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
    us-west-2:
      HVM64: ami-01e24be29428c15b2
    eu-west-1:
      HVM64: ami-08935252a36e25f85
    eu-west-2:
      HVM64: ami-01419b804382064e4
    eu-west-3:
      HVM64: ami-0dd7e7ed60da8fb83
    eu-central-1:
      HVM64: ami-0cfbf4f6db41068ac
    eu-north-1:
      HVM64: ami-86fe70f8
    ap-northeast-1:
      HVM64: ami-00a5245b4816c38e6
    ap-northeast-2:
      HVM64: ami-00dc207f8ba6dc919
    ap-northeast-3:
      HVM64: ami-0b65f69a5c11f3522
    ap-southeast-1:
      HVM64: ami-05b3bcf7f311194b3
    ap-southeast-2:
      HVM64: ami-02fd0b06f06d93dfc
    ap-south-1:
      HVM64: ami-0ad42f4f66f6c1cc9
    ca-central-1:
      HVM64: ami-07423fb63ea0a0930
    sa-east-1:
      HVM64: ami-05145e0b28ad8e0b2
    cn-north-1:
      HVM64: ami-053617c9d818c1189
    cn-northwest-1:
      HVM64: ami-0f7937761741dc640
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap 
        - SubnetConfig
        - VPC
        - CIDR
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, Fn::GetAZs: "" ]
      CidrBlock: !Select [ 0, Fn::Cidr: [ !GetAtt VPC.CidrBlock, 8, 12 ]]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: 'subnet-type'
          Value: 'public'
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, Fn::GetAZs: "" ]
      CidrBlock: !Select [ 1, Fn::Cidr: [ !GetAtt VPC.CidrBlock, 8, 12 ]]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: 'subnet-type'
          Value: 'public'
  PublicSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, Fn::GetAZs: "" ]
      CidrBlock: !Select [ 2, Fn::Cidr: [ !GetAtt VPC.CidrBlock, 8, 12 ]]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: 'subnet-type'
          Value: 'public'
  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, Fn::GetAZs: "" ]
      CidrBlock: !Select [ 4, Fn::Cidr: [ !GetAtt VPC.CidrBlock, 8, 12 ]]
      Tags:
        - Key: 'subnet-type'
          Value: 'private'
  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, Fn::GetAZs: "" ]
      CidrBlock: !Select [ 5, Fn::Cidr: [ !GetAtt VPC.CidrBlock, 8, 12 ]]
      Tags:
        - Key: 'subnet-type'
          Value: 'private'
  PrivateSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, Fn::GetAZs: "" ]
      CidrBlock: !Select [ 6, Fn::Cidr: [ !GetAtt VPC.CidrBlock, 8, 12 ]]
      Tags:
        - Key: 'subnet-type'
          Value: 'private'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
  ElasticIPa:
    Type: 'AWS::EC2::EIP'
  ElasticIPb:
    Type: 'AWS::EC2::EIP'
  ElasticIPc:
    Type: 'AWS::EC2::EIP'
  NATGatewayA:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: ElasticIPa
    Properties:
      AllocationId: !GetAtt ElasticIPa.AllocationId
      SubnetId: !Ref PrivateSubnetA
  NATGatewayB:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: ElasticIPb
    Properties:
      AllocationId: !GetAtt ElasticIPb.AllocationId
      SubnetId: !Ref PrivateSubnetB
  NATGatewayC:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: ElasticIPc
    Properties:
      AllocationId: !GetAtt ElasticIPc.AllocationId
      SubnetId: !Ref PrivateSubnetC
  PrivateRouteTableA:
    Type: 'AWS::EC2::RouteTable'
    Properties: 
      VpcId: !Ref VPC
  PrivateRouteTableB:
    Type: 'AWS::EC2::RouteTable'
    Properties: 
      VpcId: !Ref VPC
  PrivateRouteTableC:
    Type: 'AWS::EC2::RouteTable'
    Properties: 
      VpcId: !Ref VPC
  PrivateRouteA:
    Type: 'AWS::EC2::Route'
    DependsOn: NATGatewayA
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA
  PrivateSubnetRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA
  PrivateRouteB:
    Type: 'AWS::EC2::Route'
    DependsOn: NATGatewayB
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayB
  PrivateSubnetRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB
  PrivateRouteC:
    Type: 'AWS::EC2::Route'
    DependsOn: NATGatewayC
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayC
  PrivateSubnetRouteTableAssociationC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTableC
  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  InboundHTTPPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundSSHPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref SSHLocation
      PortRange:
        From: '22'
        To: '22'
  InboundEphemeralPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PublicSubnetNetworkAclAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociationC:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetC
      NetworkAclId: !Ref PublicNetworkAcl
  BastionASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn: GatewayToInternet
    Properties:
      # AvailabilityZones: Fn::GetAZs: ""
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
      LaunchConfigurationName: !Ref LaunchConfig
      DesiredCapacity: 1
      MinSize: '1'
      MaxSize: '1'
      HealthCheckGracePeriod: 300
      HealthCheckType: 'EC2'

  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment1: Configure the bootstrap helpers
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum:
              wget: []
          files:
            /etc/cfn/cfn-hup.conf:
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfig
                runas=root
          services:
            systemd:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref EC2InstanceType
          - Arch
      InstanceType: !Ref EC2InstanceType
      SecurityGroups:
        - !Ref BastionSecurityGroup
      KeyName: !Ref KeyName
      UserData: !Base64 
          Fn::Sub: |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfig
            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource BastionASG

  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access to the Bastion
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      VpcId: !Ref VPC
  
Outputs:
  VPCId:
    Description: VPCId of the newly created VPC
    Value: !Ref VPC
  PublicSubnetA:
    Description: SubnetId of the public subnet
    Value: !Ref PublicSubnetA
